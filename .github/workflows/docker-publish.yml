name: Build and Publish API-Premium Gateway Docker Image

on:
  push:
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Generate lowercase image name
      - name: Set image name
        run: |
          echo "IMAGE_NAME=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "TAG=${{ github.ref_name }}" >> $GITHUB_ENV

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@59acb6260d9c0ba8f4a2f9d9b48431a222b68e20 #v3.5.0
        with:
          cosign-release: 'v2.2.4'

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@96383f45573cb7f253c731d3b3ab81c87ef81934 # v5.0.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push API-Premium Gateway Docker image
        id: build-and-push
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          file: ./Dockerfile.allinone.fixed
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Create release with usage instructions
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## API Premium Gateway ${{ env.TAG }} - 一体化镜像
            
            ### 🚀 超简单部署 - 一条命令启动
            
            ```bash
            # 直接拉取并运行一体化镜像（包含应用+数据库）
            docker run -d \
              --name api-premium-gateway \
              -p 8081:8081 \
              -v gateway_data:/var/lib/postgresql/14/main \
              -v gateway_logs:/app/logs \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
            ```
            
            ### 📦 镜像特性
            
            ✅ **一体化设计**: 应用 + PostgreSQL 数据库在同一容器中  
            ✅ **零配置启动**: 无需额外配置文件或数据库设置  
            ✅ **自动初始化**: 首次启动自动创建数据库表结构  
            ✅ **数据持久化**: 数据保存在 Docker Volume 中  
            ✅ **健康检查**: 内置应用健康检查机制  
            ✅ **多架构支持**: 支持 AMD64 和 ARM64 架构  
            
            ### 🔗 访问地址
            
            启动后即可访问：
            - **应用首页**: http://localhost:8081/api
            - **健康检查**: http://localhost:8081/api/health
            - **管理后台**: http://localhost:8081/api (包含完整的 REST API)
            
            ### 📊 容器内服务
            
            - **Java 应用**: 端口 8081
            - **PostgreSQL**: 端口 5432（容器内部）
            - **数据库信息**:
              - 数据库名: `api_gateway`
              - 用户名: `gateway_user`
              - 密码: `gateway_pass`
            
            ### 🛠️ 高级用法
            
            #### 查看日志
            ```bash
            docker logs api-premium-gateway
            ```
            
            #### 进入容器调试
            ```bash
            docker exec -it api-premium-gateway bash
            ```
            
            #### 连接数据库
            ```bash
            docker exec -it api-premium-gateway psql -U gateway_user -d api_gateway
            ```
            
            #### 停止和清理
            ```bash
            docker stop api-premium-gateway
            docker rm api-premium-gateway
            ```
            
            ### 🏷️ 镜像标签
            
            - **稳定版**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}`
            - **最新版**: `${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest`
            
            ### ⚡ 快速体验
            
            想要快速体验？运行以下命令：
            
            ```bash
            docker run -d --name api-gateway-demo -p 8081:8081 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # 等待约1-2分钟启动完成，然后访问
            curl http://localhost:8081/api/health
            ```

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}